/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  SwapAndDeposit,
  SwapAndDepositInterface,
} from "../../contracts/SwapAndDeposit";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_usdt",
        type: "address",
      },
      {
        internalType: "address",
        name: "_sdgi",
        type: "address",
      },
      {
        internalType: "address",
        name: "_exchange",
        type: "address",
      },
      {
        internalType: "address",
        name: "_vault",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "authorizeExchangeNVault",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "exchange",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "sdgi",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "swapNDeposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "usdt",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "vault",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610a58380380610a5883398101604081905261002f916100fb565b6100383361008f565b60018055600280546001600160a01b039586166001600160a01b031991821617909155600380549486169482169490941790935560048054928516928416929092179091556005805491909316911617905561014f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146100f657600080fd5b919050565b6000806000806080858703121561011157600080fd5b61011a856100df565b9350610128602086016100df565b9250610136604086016100df565b9150610144606086016100df565b905092959194509250565b6108fa8061015e6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b146100f7578063c1bcd96c14610108578063d2f7265a14610110578063f2fde38b14610123578063fbfa77cf1461013657600080fd5b80631ea3c5bc146100985780632f48ab7d146100c75780634238dbd6146100da578063715018a6146100ef575b600080fd5b6003546100ab906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6002546100ab906001600160a01b031681565b6100ed6100e83660046107cc565b610149565b005b6100ed6102bc565b6000546001600160a01b03166100ab565b6100ed6102d0565b6004546100ab906001600160a01b031681565b6100ed6101313660046107e5565b6103f2565b6005546100ab906001600160a01b031681565b600260015414156101a15760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026001556101be336002546001600160a01b0316903084610468565b60048054604051635b67241b60e01b81529182018390526000916001600160a01b0390911690635b67241b90602401602060405180830381600087803b15801561020757600080fd5b505af115801561021b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023f919061080e565b6005549091506001600160a01b0316636e553f6582336040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401600060405180830381600087803b15801561029c57600080fd5b505af11580156102b0573d6000803e3d6000fd5b50506001805550505050565b6102c46104c8565b6102ce6000610522565b565b6102d86104c8565b6002546004805460405163095ea7b360e01b81526001600160a01b039182169281019290925260001960248301529091169063095ea7b390604401602060405180830381600087803b15801561032d57600080fd5b505af1158015610341573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103659190610827565b5060035460055460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b390604401602060405180830381600087803b1580156103b757600080fd5b505af11580156103cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ef9190610827565b50565b6103fa6104c8565b6001600160a01b03811661045f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610198565b6103ef81610522565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526104c2908590610572565b50505050565b6000546001600160a01b031633146102ce5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610198565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006105c7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166106499092919063ffffffff16565b80519091501561064457808060200190518101906105e59190610827565b6106445760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610198565b505050565b60606106588484600085610662565b90505b9392505050565b6060824710156106c35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610198565b6001600160a01b0385163b61071a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610198565b600080866001600160a01b031685876040516107369190610875565b60006040518083038185875af1925050503d8060008114610773576040519150601f19603f3d011682016040523d82523d6000602084013e610778565b606091505b5091509150610788828286610793565b979650505050505050565b606083156107a257508161065b565b8251156107b25782518084602001fd5b8160405162461bcd60e51b81526004016101989190610891565b6000602082840312156107de57600080fd5b5035919050565b6000602082840312156107f757600080fd5b81356001600160a01b038116811461065b57600080fd5b60006020828403121561082057600080fd5b5051919050565b60006020828403121561083957600080fd5b8151801515811461065b57600080fd5b60005b8381101561086457818101518382015260200161084c565b838111156104c25750506000910152565b60008251610887818460208701610849565b9190910192915050565b60208152600082518060208401526108b0816040850160208701610849565b601f01601f1916919091016040019291505056fea26469706673582212200fb2f625e505c8b9e041f38a41f05d9e41d250505dbfa87952523e855dbe9af764736f6c63430008090033";

type SwapAndDepositConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapAndDepositConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SwapAndDeposit__factory extends ContractFactory {
  constructor(...args: SwapAndDepositConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _usdt: PromiseOrValue<string>,
    _sdgi: PromiseOrValue<string>,
    _exchange: PromiseOrValue<string>,
    _vault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SwapAndDeposit> {
    return super.deploy(
      _usdt,
      _sdgi,
      _exchange,
      _vault,
      overrides || {}
    ) as Promise<SwapAndDeposit>;
  }
  override getDeployTransaction(
    _usdt: PromiseOrValue<string>,
    _sdgi: PromiseOrValue<string>,
    _exchange: PromiseOrValue<string>,
    _vault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _usdt,
      _sdgi,
      _exchange,
      _vault,
      overrides || {}
    );
  }
  override attach(address: string): SwapAndDeposit {
    return super.attach(address) as SwapAndDeposit;
  }
  override connect(signer: Signer): SwapAndDeposit__factory {
    return super.connect(signer) as SwapAndDeposit__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapAndDepositInterface {
    return new utils.Interface(_abi) as SwapAndDepositInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SwapAndDeposit {
    return new Contract(address, _abi, signerOrProvider) as SwapAndDeposit;
  }
}
