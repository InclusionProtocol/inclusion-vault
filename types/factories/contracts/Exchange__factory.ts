/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Exchange, ExchangeInterface } from "../../contracts/Exchange";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_usdt",
        type: "address",
      },
      {
        internalType: "address",
        name: "_sdgi",
        type: "address",
      },
      {
        internalType: "address",
        name: "_admin",
        type: "address",
      },
      {
        internalType: "address",
        name: "oracle",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "sdgi",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "usdt",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    name: "ExchangeSDGI2USDT",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "usdt",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "sdgi",
        type: "uint256",
      },
    ],
    name: "ExchangeUSDT2SDGI",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pauser",
        type: "address",
      },
      {
        internalType: "bool",
        name: "enabled",
        type: "bool",
      },
    ],
    name: "addPauser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "admin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_admin",
        type: "address",
      },
    ],
    name: "changeAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "exchangeFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "sdgi",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "sdgi2usdt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "val",
        type: "bool",
      },
    ],
    name: "setPause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "usdt",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "usdt2sdgi",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405260646005553480156200001657600080fd5b50604051620014e1380380620014e1833981016040819052620000399162000111565b6200004433620000a4565b60018055600280546001600160a01b03958616610100026001600160a81b0319909116179055600380549385166001600160a01b03199485161790556004805492851692841692909217909155600780549190931691161790556200016e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200010c57600080fd5b919050565b600080600080608085870312156200012857600080fd5b6200013385620000f4565b93506200014360208601620000f4565b92506200015360408601620000f4565b91506200016360608601620000f4565b905092959194509250565b611363806200017e6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638f2839701161008c578063d9caed1211610066578063d9caed12146101cb578063f2fde38b146101de578063f851a440146101f1578063ffc03d8d1461020457600080fd5b80638f283970146101925780639c92811e146101a5578063bedb86fb146101b857600080fd5b80635b67241b116100c85780635b67241b1461014e5780635c975abb14610161578063715018a6146101775780638da5cb5b1461018157600080fd5b80631ea3c5bc146100ef5780632ecd3be41461011f5780632f48ab7d14610136575b600080fd5b600354610102906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61012860055481565b604051908152602001610116565b6002546101029061010090046001600160a01b031681565b61012861015c366004610f7d565b610217565b60025460ff166040519015158152602001610116565b61017f61050b565b005b6000546001600160a01b0316610102565b61017f6101a0366004610fb2565b61051f565b6101286101b3366004610f7d565b610574565b61017f6101c6366004610fdb565b610894565b61017f6101d9366004610ff8565b6108fa565b61017f6101ec366004610fb2565b6109e7565b600454610102906001600160a01b031681565b61017f610212366004611034565b610a5d565b6000600260015414156102715760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260015561027e610abb565b81156104fe5760025461010090046001600160a01b03166370a08231336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156102da57600080fd5b505afa1580156102ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610312919061106b565b8211156103555760405162461bcd60e51b81526020600482015260116024820152704e6f20656e6f7567682062616c616e636560781b6044820152606401610268565b60075460408051633fabe5a360e21b815290516000926001600160a01b03169163feaf968c9160048083019260a0929190829003018186803b15801561039a57600080fd5b505afa1580156103ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d2919061109e565b505050915050600081600760009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561042957600080fd5b505afa15801561043d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046191906110ee565b61046f9060ff16600a61120d565b6104799086611219565b6104839190611238565b604080518681526020810183905291925033917f540fc9dd1ce30206a5e378c95fe361a444350eeffacecd5a391970c9dfa2cf97910160405180910390a26104de3360025461010090046001600160a01b0316903087610b01565b6104f5336003546001600160a01b03169083610b72565b91506105029050565b5060005b60018055919050565b610513610ba2565b61051d6000610bfc565b565b6004546001600160a01b0316336001600160a01b0316146105525760405162461bcd60e51b81526004016102689061125a565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000600260015414156105c95760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610268565b60026001556105d6610abb565b81156104fe576003546001600160a01b03166370a08231336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561062d57600080fd5b505afa158015610641573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610665919061106b565b8211156106a85760405162461bcd60e51b81526020600482015260116024820152704e6f20656e6f7567682062616c616e636560781b6044820152606401610268565b60075460408051633fabe5a360e21b815290516000926001600160a01b03169163feaf968c9160048083019260a0929190829003018186803b1580156106ed57600080fd5b505afa158015610701573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610725919061109e565b5050509150506000600760009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561077b57600080fd5b505afa15801561078f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b391906110ee565b6107c19060ff16600a61120d565b6107cb8386611219565b6107d59190611238565b90506000612710600554836107ea9190611219565b6107f49190611238565b9050337fe0276b255ba732914b296d5c98df76e5d9b4664c456b78821765fadcf2be02f686610823848661127e565b604080519283526020830191909152810184905260600160405180910390a261085a336003546001600160a01b0316903088610b01565b61088033610868838561127e565b60025461010090046001600160a01b03169190610b72565b61088a818361127e565b9350505050610502565b3360009081526006602052604090205460ff166108e15760405162461bcd60e51b815260206004820152600b60248201526a506175736572206f6e6c7960a81b6044820152606401610268565b80156108f2576108ef610c4c565b50565b6108ef610ca6565b6004546001600160a01b0316336001600160a01b03161461092d5760405162461bcd60e51b81526004016102689061125a565b600081116109665760405162461bcd60e51b81526004016102689060208082526004908201526304e6f20360e41b604082015260600190565b6002546001600160a01b0383811661010090920416148061099457506003546001600160a01b038381169116145b6109ce5760405162461bcd60e51b815260206004820152600b60248201526a15dc9bdb99c8185cdcd95d60aa1b6044820152606401610268565b6109e26001600160a01b0383168483610b72565b505050565b6109ef610ba2565b6001600160a01b038116610a545760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610268565b6108ef81610bfc565b6004546001600160a01b0316336001600160a01b031614610a905760405162461bcd60e51b81526004016102689061125a565b6001600160a01b03919091166000908152600660205260409020805460ff1916911515919091179055565b60025460ff161561051d5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610268565b6040516001600160a01b0380851660248301528316604482015260648101829052610b6c9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610cdf565b50505050565b6040516001600160a01b0383166024820152604481018290526109e290849063a9059cbb60e01b90606401610b35565b6000546001600160a01b0316331461051d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610268565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610c54610abb565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610c893390565b6040516001600160a01b03909116815260200160405180910390a1565b610cae610db1565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33610c89565b6000610d34826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610dfa9092919063ffffffff16565b8051909150156109e25780806020019051810190610d529190611295565b6109e25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610268565b60025460ff1661051d5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610268565b6060610e098484600085610e13565b90505b9392505050565b606082471015610e745760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610268565b6001600160a01b0385163b610ecb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610268565b600080866001600160a01b03168587604051610ee791906112de565b60006040518083038185875af1925050503d8060008114610f24576040519150601f19603f3d011682016040523d82523d6000602084013e610f29565b606091505b5091509150610f39828286610f44565b979650505050505050565b60608315610f53575081610e0c565b825115610f635782518084602001fd5b8160405162461bcd60e51b815260040161026891906112fa565b600060208284031215610f8f57600080fd5b5035919050565b80356001600160a01b0381168114610fad57600080fd5b919050565b600060208284031215610fc457600080fd5b610e0c82610f96565b80151581146108ef57600080fd5b600060208284031215610fed57600080fd5b8135610e0c81610fcd565b60008060006060848603121561100d57600080fd5b61101684610f96565b925061102460208501610f96565b9150604084013590509250925092565b6000806040838503121561104757600080fd5b61105083610f96565b9150602083013561106081610fcd565b809150509250929050565b60006020828403121561107d57600080fd5b5051919050565b805169ffffffffffffffffffff81168114610fad57600080fd5b600080600080600060a086880312156110b657600080fd5b6110bf86611084565b94506020860151935060408601519250606086015191506110e260808701611084565b90509295509295909350565b60006020828403121561110057600080fd5b815160ff81168114610e0c57600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561116257816000190482111561114857611148611111565b8085161561115557918102915b93841c939080029061112c565b509250929050565b60008261117957506001611207565b8161118657506000611207565b816001811461119c57600281146111a6576111c2565b6001915050611207565b60ff8411156111b7576111b7611111565b50506001821b611207565b5060208310610133831016604e8410600b84101617156111e5575081810a611207565b6111ef8383611127565b806000190482111561120357611203611111565b0290505b92915050565b6000610e0c838361116a565b600081600019048311821515161561123357611233611111565b500290565b60008261125557634e487b7160e01b600052601260045260246000fd5b500490565b6020808252600a908201526941646d696e206f6e6c7960b01b604082015260600190565b60008282101561129057611290611111565b500390565b6000602082840312156112a757600080fd5b8151610e0c81610fcd565b60005b838110156112cd5781810151838201526020016112b5565b83811115610b6c5750506000910152565b600082516112f08184602087016112b2565b9190910192915050565b60208152600082518060208401526113198160408501602087016112b2565b601f01601f1916919091016040019291505056fea264697066735822122000d01c848a4ff0a755f9322647400a272f26e968e68c0591252247a6de655bb264736f6c63430008090033";

type ExchangeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExchangeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Exchange__factory extends ContractFactory {
  constructor(...args: ExchangeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _usdt: PromiseOrValue<string>,
    _sdgi: PromiseOrValue<string>,
    _admin: PromiseOrValue<string>,
    oracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Exchange> {
    return super.deploy(
      _usdt,
      _sdgi,
      _admin,
      oracle,
      overrides || {}
    ) as Promise<Exchange>;
  }
  override getDeployTransaction(
    _usdt: PromiseOrValue<string>,
    _sdgi: PromiseOrValue<string>,
    _admin: PromiseOrValue<string>,
    oracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _usdt,
      _sdgi,
      _admin,
      oracle,
      overrides || {}
    );
  }
  override attach(address: string): Exchange {
    return super.attach(address) as Exchange;
  }
  override connect(signer: Signer): Exchange__factory {
    return super.connect(signer) as Exchange__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExchangeInterface {
    return new utils.Interface(_abi) as ExchangeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Exchange {
    return new Contract(address, _abi, signerOrProvider) as Exchange;
  }
}
